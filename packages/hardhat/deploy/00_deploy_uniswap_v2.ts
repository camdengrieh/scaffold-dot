import { HardhatRuntimeEnvironment } from "hardhat/types";
import { DeployFunction } from "hardhat-deploy/types";
import { Contract } from "ethers";

/**
 * Main deployment script for Uniswap V2 contracts and TokenFactory
 * Deploys the complete Uniswap V2 suite plus token creation capabilities
 *
 * @param hre HardhatRuntimeEnvironment object.
 */
const deployUniswapV2: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {
  const { deployer } = await hre.getNamedAccounts();
  const { deploy } = hre.deployments;

  console.log("\nðŸ¦„ Deploying Uniswap V2 + Token Factory contracts...\n");

  // Known WETH addresses for different networks
  const WETH_ADDRESSES: { [key: string]: string } = {
    // Passet Hub (Custom network) - will deploy mock WETH
    "420420421": "0x0000000000000000000000000000000000000000",
  };

  const chainId = await hre.getChainId();
  let wethAddress = WETH_ADDRESSES[chainId];

  // Deploy mock WETH if not available on this network
  if (!wethAddress || wethAddress === "0x0000000000000000000000000000000000000000") {
    console.log("ðŸ“¦ Deploying Mock WETH contract...");
    const mockWeth = await deploy("MockWETH", {
      from: deployer,
      args: [],
      log: true,
      autoMine: true,
      contract: {
        abi: [
          "function name() public pure returns (string memory)",
          "function symbol() public pure returns (string memory)",
          "function decimals() public pure returns (uint8)",
          "function balanceOf(address) public view returns (uint256)",
          "function transfer(address to, uint256 value) public returns (bool)",
          "function allowance(address owner, address spender) public view returns (uint256)",
          "function approve(address spender, uint256 value) public returns (bool)",
          "function transferFrom(address from, address to, uint256 value) public returns (bool)",
          "function deposit() public payable",
          "function withdraw(uint256 wad) public",
          "event Transfer(address indexed from, address indexed to, uint256 value)",
          "event Approval(address indexed owner, address indexed spender, uint256 value)",
          "event Deposit(address indexed dst, uint256 wad)",
          "event Withdrawal(address indexed src, uint256 wad)",
        ],
        bytecode:
          "",
      },
    });

    wethAddress = mockWeth.address;
    console.log(`âœ… Mock WETH deployed at: ${wethAddress}\n`);
  } else {
    console.log(`âœ… Using existing WETH at: ${wethAddress}\n`);
  }

  // 1. Deploy UniswapV2Factory
  console.log("ðŸ“¦ Deploying UniswapV2Factory...");
  const factory = await deploy("UniswapV2Factory", {
    from: deployer,
    // feeToSetter is set to the deployer initially
    args: [deployer],
    log: true,
    autoMine: true,
  });

  console.log(`âœ… UniswapV2Factory deployed at: ${factory.address}\n`);

  // 2. Deploy UniswapV2Router
  console.log("ðŸ“¦ Deploying UniswapV2Router...");
  const router = await deploy("UniswapV2Router", {
    from: deployer,
    // Router needs factory address and WETH address
    args: [factory.address, wethAddress],
    log: true,
    autoMine: true,
  });

  console.log(`âœ… UniswapV2Router deployed at: ${router.address}\n`);

  // 3. Deploy TokenFactory
  console.log("ðŸ“¦ Deploying TokenFactory...");
  const tokenFactory = await deploy("TokenFactory", {
    from: deployer,
    args: [],
    log: true,
    autoMine: true,
  });

  console.log(`âœ… TokenFactory deployed at: ${tokenFactory.address}\n`);

  // Get deployed contracts for interaction
  const factoryContract = await hre.ethers.getContract<Contract>("UniswapV2Factory", deployer);

  // Display deployment summary
  console.log("ðŸŽ‰ Uniswap V2 + Token Factory Deployment Summary:");
  console.log("=================================================");
  console.log(`WETH Address: ${wethAddress}`);
  console.log(`UniswapV2Factory Address: ${factory.address}`);
  console.log(`UniswapV2Router Address: ${router.address}`);
  console.log(`TokenFactory Address: ${tokenFactory.address}`);
  console.log(`Fee To Setter: ${deployer}`);

  // Get the PAIR_HASH from factory for frontend integration
  try {
    const pairHash = await factoryContract.PAIR_HASH();
    console.log(`Pair Init Code Hash: ${pairHash}`);
  } catch {
    console.log("Note: Could not retrieve PAIR_HASH");
  }

  console.log("\nðŸ“š Next steps:");
  console.log("1. Create custom tokens using the TokenFactory");
  console.log("2. Use the Router to create pairs and add liquidity");
  console.log("3. Perform swaps between your custom tokens");
  console.log("4. Build a frontend DEX interface");
  console.log("5. Monitor all activity through the Block Explorer\n");
};

export default deployUniswapV2;

// Tags are useful if you have multiple deploy files and only want to run one of them.
// e.g. yarn deploy --tags UniswapV2
deployUniswapV2.tags = ["UniswapV2", "TokenFactory", "Factory", "Router"];
